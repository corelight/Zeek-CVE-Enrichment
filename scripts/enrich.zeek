@load ./extract_cve

module CVEEnrichment;

type Idx: record {
    ip: addr;
};

type Val: record {
    cve_list: string_set;
    ## The ID of the known CVE on the vulnerable host.
    cve: string &log &optional;
    ## The hostname of the vulnerable host.
    hostname: string &log &optional;
    ## The unique identifier, assigned by the CVE information source, of the vulnerable host.
    host_uid: string &log &optional;
    ## The machine domain of the vulnerable host.
    machine_domain: string &log &optional;
    ## The Operating System version of the vulnerable host.
    os_version: string &log &optional;
    ## The source of the CVE information.
    source: string &log &optional;
};


global cve_data: table[addr] of Val = table();

event zeek_init() {
    Input::add_table([
        $source="cve_data.tsv",
        $name="cve_data",
        $idx=Idx,
        $val=Val,
        $destination=cve_data,
        $mode=Input::REREAD
    ]);
}

# Enrich the Suricata_corelight log
redef record Suricata::Info += {
    orig_vulnerable_host: Val &log &optional;
    resp_vulnerable_host:  Val &log &optional;
};

event Suricata::connection_alert(c: connection, msg: Corelight::Suricata::SuricataMsg)
{
    if ( !msg?$alert || ( !msg$alert?$signature && !msg$alert?$metadata ))
        return;

    local orig = c$id$orig_h;
    local resp = c$id$resp_h;

    local cve: string;

    # Look for CVE in metadata
    if ( msg$alert?$metadata ){
        cve = extract_cve_metadata(msg$alert$metadata);
    }

    # Look for CVE in signature name, if it's not in metadate
    if (cve == "" && msg$alert?$signature ) {
        cve = extract_cve_sig(msg$alert$signature);
    }

    if (cve == "")
        return;

    # some CVE's have "_" and some have "-", normalize to "-"
    cve = subst_string(cve, "_", "-");


    if (orig in cve_data && cve in cve_data[orig]$cve_list) {
        cve_data[orig]$cve = cve;
        c$suricata_alert$orig_vulnerable_host = cve_data[orig];
    }

    if (resp in cve_data && cve in cve_data[resp]$cve_list) {
        cve_data[resp]$cve = cve;
        c$suricata_alert$resp_vulnerable_host = cve_data[resp];
    }
}

# Enrich the Notice log
redef record Notice::Info += {
    orig_vulnerable_host: Val &log &optional;
    resp_vulnerable_host:  Val &log &optional;
};

hook Notice::notice(n: Notice::Info)
{
    if ( !n?$msg )
        return;

    local orig: addr;
    local resp: addr;
    local cve: string;

    if ( n?$id ) {
        if ( n$id?$orig_h ) {
            orig = n$id$orig_h;
        }
        if ( n$id?$resp_h ) {
            resp = n$id$resp_h;
        }
    }


    # Look for CVE in msg
    cve = extract_cve_sig(n$msg);

    if (cve == "")
        return;

    if (orig in cve_data && cve in cve_data[orig]$cve_list) {
        cve_data[orig]$cve = cve;
        n$orig_vulnerable_host = cve_data[orig];
    }

    if (resp in cve_data && cve in cve_data[resp]$cve_list) {
        cve_data[resp]$cve = cve;
        n$resp_vulnerable_host = cve_data[resp];
    }
}
